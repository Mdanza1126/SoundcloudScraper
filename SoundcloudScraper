# Import the necessary libraries
import requests
from bs4 import BeautifulSoup
import re
import pandas as pd
from flask import Flask, render_template, request, jsonify
from soundcloud_scraper import SoundcloudScraper

# Initialize the Flask app
app = Flask(__name__)

# Define the home page
@app.route('/')
def home():
    return render_template('index.html')

# Define the scraper route
@app.route('/scrape', methods=['POST'])
def scrape():
    # Get the search query from the form
    query = request.form['query']

    # Define the Soundcloud URL
    base_url = 'https://soundcloud.com/'

    # Create a SoundcloudScraper object
    scraper = SoundcloudScraper()

    # Check if the query is a profile URL
    if 'soundcloud.com/' in query:
        # Scrape the profile data using the SoundcloudScraper object
        profile_data = scraper.scrape_profile(query)

        # Create a dictionary of the scraped data and return it as JSON
        data = {'followers': profile_data['followers'], 'likes': profile_data['likes']}
        return jsonify(data)

    # Check if the query is a hashtag
    elif query.startswith('#'):
        # Scrape the hashtag data using the SoundcloudScraper object
        hashtag_data = scraper.scrape_hashtag(query)

        # Create a dictionary of the scraped data and return it as JSON
        data = {'followers': hashtag_data['followers'], 'likes': hashtag_data['likes']}
        return jsonify(data)

    # Check if the query is a song URL
    elif 'soundcloud.com/' in query and '/track/' in query:
        # Scrape the song data using the SoundcloudScraper object
        song_data = scraper.scrape_song(query)

        # Create a dictionary of the scraped data and return it as JSON
        data = {'likes': song_data['likes'], 'comments': song_data['comments']}
        return jsonify(data)

    # Return an error message if the query is invalid
    else:
        return jsonify({'error': 'Invalid query'})

# Run the Flask app
if __name__ == '__main__':
    app.run()
